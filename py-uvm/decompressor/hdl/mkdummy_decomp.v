// Copyright (c) 2018 IIT Madras. See IITM_LICENSE.txt file for more details

//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue May 14 18:05:38 IST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_inst                   O     1 const
// put_inst                       O    32 reg
// RDY_put_inst                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_inst_inst_in               I    16 reg
// EN_get_inst                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdummy_decomp(CLK,
		      RST_N,

		      get_inst_inst_in,
		      EN_get_inst,
		      RDY_get_inst,

		      put_inst,
		      RDY_put_inst);
  input  CLK;
  input  RST_N;

  // action method get_inst
  input  [15 : 0] get_inst_inst_in;
  input  EN_get_inst;
  output RDY_get_inst;

  // value method put_inst
  output [31 : 0] put_inst;
  output RDY_put_inst;

  // signals for module outputs
  wire [31 : 0] put_inst;
  wire RDY_get_inst, RDY_put_inst;

  // register inst
  reg [15 : 0] inst;
  wire [15 : 0] inst_D_IN;
  wire inst_EN;

  // register inst_32
  reg [31 : 0] inst_32;
  wire [31 : 0] inst_32_D_IN;
  wire inst_32_EN;

  // rule scheduling signals
  wire CAN_FIRE_get_inst, WILL_FIRE_get_inst;

  // action method get_inst
  assign RDY_get_inst = 1'd1 ;
  assign CAN_FIRE_get_inst = 1'd1 ;
  assign WILL_FIRE_get_inst = EN_get_inst ;

  // value method put_inst
  assign put_inst = inst_32 ;
  assign RDY_put_inst = 1'd1 ;

  // register inst
  assign inst_D_IN = get_inst_inst_in ;
  assign inst_EN = EN_get_inst ;

  // register inst_32
  assign inst_32_D_IN = 32'h0 ;
  assign inst_32_EN = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst <= `BSV_ASSIGNMENT_DELAY 16'd0;
	inst_32 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (inst_EN) inst <= `BSV_ASSIGNMENT_DELAY inst_D_IN;
	if (inst_32_EN) inst_32 <= `BSV_ASSIGNMENT_DELAY inst_32_D_IN;
      end
  end

  `ifdef VERBOSE
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst = 16'hAAAA;
    inst_32 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  `endif
endmodule  // mkdummy_decomp

